{"version":3,"sources":["img/tick-1.svg","img/double-check.svg","components/ToDo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ToDo","props","this","toDo","isComplete","className","src","tickDone","onClick","text","Component","App","state","toDoList","currentView","eventClick","bind","eventEnter","eventTickAll","allDone","isActive","item","index","doList","setState","event","key","push","target","value","doubleCheck","type","placeholder","onKeyUp","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,6OC4B5BC,E,kDArBb,WAAYC,GAAQ,uCACZA,G,qDAIN,GAAkC,GAA9BC,KAAKD,MAAME,KAAKC,WAClB,IAAIC,EAAY,gBAEhBA,EAAY,cAEd,OACE,yBAAKA,UAAWA,GACd,yBAAKC,IAAKC,MACV,uBAAGC,QAASN,KAAKD,MAAMO,SACtBN,KAAKD,MAAME,KAAKM,W,GAfNC,a,yBCoFJC,E,kDAnFb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,SAAU,CACV,CAACJ,KAAM,SAAUL,YAAY,GAC7B,CAACK,KAAM,YAAaL,YAAY,GAChC,CAACK,KAAM,QAASL,YAAY,GAC5B,CAACK,KAAM,QAASL,YAAY,IAC5BU,YAAa,OAEf,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBAEpB,EAAKG,QAAU,GACf,EAAKN,SAAW,EAAKD,MAAMC,SAC3B,EAAKO,SAAW,SAhBJ,E,uDAmBHC,EAAMC,GAAQ,IAAD,OAEtB,OAAO,WACH,IAAIC,EAAS,EAAKX,MAAMC,SACxBU,EAAOD,GAAOlB,YAAcmB,EAAOD,GAAOlB,WAC1C,EAAKoB,SAAS,CACZX,SAAUU,IAEoB,GAA5BA,EAAOD,GAAOlB,aAChB,EAAKe,QAAU,IAPR,oBASKI,GATL,IAST,2BAAsB,CACpB,GAAoB,GADA,QACdnB,WACJ,QAXK,8BAcT,EAAKe,QAAU,a,iCAGVM,GACT,GAAiB,SAAbA,EAAMC,IAAgB,CACxB,IAAIb,EAAWX,KAAKU,MAAMC,SAC1BA,EAASc,KAAK,CAAClB,KAAMgB,EAAMG,OAAOC,MAAOzB,YAAY,IACrDF,KAAKsB,SAAS,CAACX,aACfY,EAAMG,OAAOC,MAAQ,GACrB3B,KAAKiB,QAAU,M,qCAKjB,IADa,EACTN,EAAWX,KAAKU,MAAMC,SADb,cAECA,GAFD,IAEb,2BAAwB,SACpBT,YAAa,GAHJ,8BAKbF,KAAKsB,SAAS,CAACX,aACfX,KAAKiB,QAAU,Y,+BAGN,IAAD,OACR,OACE,yBAAKd,UAAU,aACb,qCACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKC,IAAKwB,IACRzB,UAAWH,KAAKiB,QAChBX,QAASN,KAAKgB,eAChB,2BAAOa,KAAK,OACVC,YAAY,WACZC,QAAS/B,KAAKe,cAEjBf,KAAKW,SAASqB,KAAI,SAACb,EAAMC,GACxB,OAAQ,kBAAC,EAAD,CACNnB,KAAMkB,EACNK,IAAKJ,EACLd,QAAS,EAAKO,WAAWM,EAAMC,c,GA3E3BZ,aCMEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4b8374f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tick-1.4e8fb437.svg\";","module.exports = __webpack_public_path__ + \"static/media/double-check.734994c1.svg\";","import React, {Component} from 'react';\r\nimport './style.css';\r\n//import tick from '../img/tick.svg';\r\nimport tickDone from '../img/tick-1.svg';\r\n\r\n\r\nclass ToDo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.toDo.isComplete == true) {\r\n      var className = \"complete\";\r\n    } else {\r\n      className = \"notComplete\";\r\n    }\r\n    return (\r\n      <div className={className}>\r\n        <img src={tickDone}/>\r\n        <p onClick={this.props.onClick}>\r\n        {this.props.toDo.text}\r\n        </p>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ToDo","import React, {Component} from 'react';\nimport ToDo from './components/ToDo';\nimport './App.css';\nimport doubleCheck from './img/double-check.svg';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      toDoList: [\n      {text: 'Wakeup', isComplete: true},\n      {text: 'Play Game', isComplete: false},\n      {text: 'Study', isComplete: true},\n      {text: 'Sleep', isComplete: true}],\n      currentView: 'All'\n    }\n    this.eventClick = this.eventClick.bind(this);\n    this.eventEnter = this.eventEnter.bind(this);\n    this.eventTickAll = this.eventTickAll.bind(this);\n    // this.eventChangePage = this.eventChangePage.bind(this);\n    this.allDone = '';\n    this.toDoList = this.state.toDoList;\n    this.isActive = 'active';\n  }\n  \n  eventClick(item, index) {\n    \n    return () => {\n        let doList = this.state.toDoList;\n        doList[index].isComplete = !doList[index].isComplete;\n        this.setState({\n          toDoList: doList\n        })\n        if (doList[index].isComplete == false) {\n          this.allDone = '';\n        }\n        for (let i of doList) {\n          if (i.isComplete == false) {\n            return;\n          }\n        }\n        this.allDone = 'allDone';\n    }\n  }\n  eventEnter(event) {\n    if (event.key == 'Enter') {\n      let toDoList = this.state.toDoList;\n      toDoList.push({text: event.target.value, isComplete: false});\n      this.setState({toDoList});\n      event.target.value = '';\n      this.allDone = '';\n    }\n  }\n\n  eventTickAll() {\n    let toDoList = this.state.toDoList;\n    for (let i of toDoList) {\n      i.isComplete = true;\n    }\n    this.setState({toDoList})\n    this.allDone = 'allDone';\n  }\n  \n  render () {\n    return (\n      <div className=\"container\">\n        <h1>todos</h1>\n        <div className=\"App\">\n          <div className=\"header\">\n            <img src={doubleCheck} \n              className={this.allDone} \n              onClick={this.eventTickAll}/>\n            <input type=\"text\"\n              placeholder=\"New Todo\"\n              onKeyUp={this.eventEnter}/>\n          </div>\n          {this.toDoList.map((item, index) => {\n            return (<ToDo\n              toDo={item}\n              key={index}\n              onClick={this.eventClick(item, index)}/>)\n          })}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}